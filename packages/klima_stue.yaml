# ============================================================
#  STUE – VARMESTYRING (Daikin)
#  P + I + D + feed-forward, rate-limit og cooldown
# ============================================================

homeassistant:
  customize:
    sensor.stue_target_pumpesettpunkt:
      friendly_name: "Stue: beregnet setpunkt til varmepumpe (Daikin)"

# ------------------------------------------------------------
#  TUNING / GRENSER
# ------------------------------------------------------------
input_number:
  stue_onsket_temp:
    name: "Stue: ønsket temp (sittehøyde)"
    min: 15
    max: 24
    step: 0.5
    unit_of_measurement: "°C"
    icon: mdi:thermometer

  # --- Feed-forward (uteavhengig baseløft)
  stue_base_offset_a:
    name: "Stue offset base a"
    min: -2
    max: 5
    step: 0.1
    icon: mdi:tune-variant

  stue_kulde_slope_b:
    name: "Stue offset kuldeslope b (°C pr °C under terskel)"
    min: 0
    max: 0.5
    step: 0.01
    icon: mdi:chart-bell-curve-cumulative

  stue_kulde_terskel:
    name: "Stue offset kulde-terskel (°C)"
    min: -10
    max: 25
    step: 1
    icon: mdi:snowflake-thermometer

  # --- P-ledd
  stue_kp:
    name: "Stue P-forsterkning (Kp)"
    min: 0
    max: 1
    step: 0.05
    icon: mdi:alpha-p-box

  # --- I-ledd
  stue_ki:
    name: "Stue I-forsterkning (Ki) [°C/(°C·min)]"
    min: 0
    max: 0.05
    step: 0.001
    icon: mdi:alpha-i-box

  stue_i_cap:
    name: "Stue I maks bidrag (°C)"
    min: 0.2
    max: 5
    step: 0.1
    icon: mdi:speedometer

  stue_i_leak:
    name: "Stue I lekkasje per steg (0–0.2)"
    min: 0
    max: 0.2
    step: 0.005
    icon: mdi:water-percent

  stue_i_term:
    name: "Stue I-term (°C)"
    min: -5
    max: 5
    step: 0.1
    unit_of_measurement: "°C"
    icon: mdi:sigma
    mode: box

  # --- Begrensninger på Daikin-setpunkt
  stue_min_setpunkt:
    name: "Stue min setpunkt (Daikin)"
    min: 13
    max: 22
    step: 0.5
    unit_of_measurement: "°C"

  stue_max_setpunkt:
    name: "Stue max setpunkt (Daikin)"
    min: 22
    max: 30
    step: 0.5
    unit_of_measurement: "°C"

  stue_setpunkt_endringsgrense:
    name: "Maks endring per justering"
    min: 0.5
    max: 3
    step: 0.5
    unit_of_measurement: "°C"

  # --- D-ledd
  stue_kd:
    name: "Stue D-forsterkning (Kd)"
    min: 0
    max: 100
    step: 0.05
    icon: mdi:alpha-d-box

  stue_deriv_threshold:
    name: "Stue D terskel (°C/min)"
    min: 0
    max: 0.2
    step: 0.0001
    icon: mdi:sigma-lower

  stue_deriv_cap:
    name: "Stue D maks bidrag (°C)"
    min: 0
    max: 3
    step: 0.1
    icon: mdi:speedometer

  stue_auto_boost_minutes:
    name: "Stue: auto-boost varighet (min)"
    min: 10
    max: 120
    step: 5
    unit_of_measurement: "min"
    icon: mdi:timer

input_boolean:
  stue_klima_hold:
    name: "Stue klima HOLD (pause regulering)"
    icon: mdi:pause-octagon

# ------------------------------------------------------------
#  MÅLEBEHANDLING – DERIVERT ROMTEMP (D-LEDD INPUT)
# ------------------------------------------------------------
sensor:
  # RASK: responsiv nok til å oppdage “nå stiger det”
  - platform: derivative
    name: stue_temp_stigning_fast
    source: sensor.stue_temperatur_virtuell
    unit_time: min # °C/min
    time_window: "00:05:00"
    round: 3

  # TREG: robust til platå-deteksjon uten å trigge på støy
  - platform: derivative
    name: stue_temp_stigning_slow
    source: sensor.stue_temperatur_virtuell
    unit_time: min
    time_window: "00:15:00"
    round: 3

  # 30-minutters glidende middel (til tidlig release/diagnostikk)
  - platform: statistics
    name: stue_temp_mean_30m
    entity_id: sensor.stue_temperatur_virtuell
    max_age: "00:30:00"
    state_characteristic: mean

# ------------------------------------------------------------
#  BEREGNINGER – TARGET + DIAGNOSE
# ------------------------------------------------------------
template:
  - sensor:
      - name: stue_temp_delta_vs_mean30
        unit_of_measurement: "°C"
        state: >
          {% set nowT = states('sensor.stue_temperatur_virtuell')|float(0) %}
          {% set m30  = states('sensor.stue_temp_mean_30m')|float(nowT) %}
          {{ (nowT - m30)|round(2) }}

      # --- HOVEDUTGANG: beregnet setpunkt til varmepumpen ---
      - name: "Stue target pumpesettpunkt"
        unique_id: stue_target_pumpesettpunkt
        unit_of_measurement: "°C"
        state: >
          {# === INNDATA === #}
          {% set desired = states('input_number.stue_onsket_temp')|float(21.5) %}
          {% set Tin     = states('sensor.stue_temperatur_virtuell')|float(desired) %}
          {% set Tout    = states('sensor.ute_temperatur_virtuell')|float(10.0) %}

          {# === FEED-FORWARD (UTE-KOMPENSASJON) === #}
          {% set a  = states('input_number.stue_base_offset_a')|float(1.5) %}
          {% set b  = states('input_number.stue_kulde_slope_b')|float(0.05) %}
          {% set Tt = states('input_number.stue_kulde_terskel')|float(13.0) %}
          {% set cold = (Tt - Tout) if ((Tt - Tout) > 0) else 0 %}
          {% set offset_ff = a + b * cold %}

          {# === P-LEDD === #}
          {% set Kp    = states('input_number.stue_kp')|float(0.30) %}
          {% set error = desired - Tin %}
          {% set corr_p = Kp * error %}


          {# === D-LEDD (på målt dT/dt) === #}
          {% set dTdt = states('sensor.stue_temp_stigning_fast')|float(0.0) %}  {# °C/min #}
          {% set Kd   = states('input_number.stue_kd')|float(0.0) %}
          {% set d_thr = states('input_number.stue_deriv_threshold')|float(0.03) %}
          {% set d_cap = states('input_number.stue_deriv_cap')|float(1.5) %}
          {% set d_raw = (-Kd * dTdt) if ((dTdt|abs) > d_thr) else 0 %}
          {% set corr_d = d_cap if d_raw > d_cap else (-d_cap if d_raw < -d_cap else d_raw) %}

          {# === SUM + KLEMMING (MIN/MAX) === #}
          {% set raw_target = desired + offset_ff + corr_p + corr_d %}
          {% set tmin = states('input_number.stue_min_setpunkt')|float(13.0) %}
          {% set tmax = states('input_number.stue_max_setpunkt')|float(28.0) %}
          {% set clamped = tmax if raw_target > tmax else (tmin if raw_target < tmin else raw_target) %}

          {{ clamped | round(1) }}

      # --- DIAGNOSE: temperaturfeil (for P/I-visualisering) ---
      - name: "Stue temperaturfeil"
        unique_id: stue_temp_error
        unit_of_measurement: "°C"
        state: >
          {% set sp = states('input_number.stue_onsket_temp')|float(21.5) %}
          {% set ti = states('sensor.stue_temperatur_virtuell')|float(sp) %}
          {{ (sp - ti) | round(2) }}

      # --- DIAGNOSE: D-bidrag (klippet) ---
      - name: "Stue D-bidrag"
        unique_id: stue_d_contrib
        unit_of_measurement: "°C"
        icon: mdi:sigma-lower
        state: >
          {% set dTdt = states('sensor.stue_temp_stigning_fast')|float(0.0) %}
          {% set Kd   = states('input_number.stue_kd')|float(0.0) %}
          {% set d_thr = states('input_number.stue_deriv_threshold')|float(0.03) %}
          {% set d_cap = states('input_number.stue_deriv_cap')|float(1.5) %}
          {% set d_raw = (-Kd * dTdt) if ((dTdt|abs) > d_thr) else 0 %}
          {% set d_lim = d_cap if d_raw > d_cap else (-d_cap if d_raw < -d_cap else d_raw) %}
          {{ d_lim | round(2) }}

# ------------------------------------------------------------
#  ANTISJATTERING (COOLDOWN)
# ------------------------------------------------------------
timer:
  stue_klima_cooldown:
    duration: "00:02:00"

  stue_auto_boost:
    duration: "00:30:00" # standard; kan overskrives i automasjon

automation:
  # ----------------------------------------------------------
  # I-LEDD OPPDATERING: integrasjon av temperaturfeil (hver 5. min)
  # ----------------------------------------------------------
  - id: stue_klima_i_update
    alias: "Stue klima – oppdater I-ledd"
    mode: queued
    max: 3
    trigger:
      - platform: time_pattern
        minutes: "/2" # dt = 5 min
      - platform: state
        entity_id:
          - input_number.stue_onsket_temp
          - sensor.stue_temperatur_virtuell
          - sensor.ute_temperatur_virtuell

    condition:
      - condition: state
        entity_id: input_boolean.stue_klima_hold
        state: "off"
    action:
      - variables:
          dt_min: 2
          desired: "{{ states('input_number.stue_onsket_temp')|float(21.5) }}"
          Tin: "{{ states('sensor.stue_temperatur_virtuell')|float(desired) }}"
          error: "{{ (desired|float) - (Tin|float) }}"
          Ki: "{{ states('input_number.stue_ki')|float(0.008) }}"
          leak: "{{ states('input_number.stue_i_leak')|float(0.02) }}"
          cap: "{{ states('input_number.stue_i_cap')|float(1.5) }}"
          I_prev: "{{ states('input_number.stue_i_term')|float(0) }}"
          db: 0.1
          tmin: "{{ states('input_number.stue_min_setpunkt')|float(18.0) }}"
          tmax: "{{ states('input_number.stue_max_setpunkt')|float(28.0) }}"
          current_set: >
            {% set t = state_attr('climate.daikinap86694','temperature') %}
            {{ (t if t is number else states('sensor.stue_target_pumpesettpunkt')|float(22.0))|float }}
          near_max: "{{ (current_set|float) >= (tmax|float - 0.1) }}"
          near_min: "{{ (current_set|float) <= (tmin|float + 0.1) }}"
          freeze_bool: >
            {% set e = error|float %}
            {% if (near_max|bool and e > 0) or (near_min|bool and e < 0) %}
              true
            {% else %}
              false
            {% endif %}
      - variables:
          incr: >
            {% set e = error|float %}
            {% if freeze_bool|bool or (e|abs < db) %}
              0
            {% else %}
              {{ (Ki|float) * e * dt_min }}
            {% endif %}
          I_tmp: "{{ (I_prev|float) * (1 - (leak|float)) + (incr|float) }}"
          I_next: >
            {% set v = I_tmp|float %}
            {% set c = cap|float %}
            {{ c if v > c else (-c if v < -c else v) }}
      - service: input_number.set_value
        target:
          entity_id: input_number.stue_i_term
        data:
          value: "{{ I_next  }}"
      - service: logbook.log
        data:
          name: "Stue klima (I-ledd)"
          message: >
            I_prev={{ I_prev }} → I_next={{ I_next|float|round(2) }} (err={{ error|float|round(2) }} °C,
            freeze={{ freeze_bool }}, leak={{ leak }}, Ki={{ Ki }}, dt={{ dt_min }}m)
          entity_id: "input_number.stue_i_term"

  # ----------------------------------------------------------
  # REGULERING MOT DAIKIN: rate limit + cooldown + hysterese
  # ----------------------------------------------------------
  - id: stue_klima_regulering_daikin
    alias: "Stue klima – reguler settpunkt på Daikin"
    mode: restart
    trigger:
      # Reager når beregnet setpunkt faktisk har oppdatert seg
      - platform: state
        entity_id: sensor.stue_target_pumpesettpunkt
      # Heartbeat for å rette opp ev. tapte hendelser
      - platform: time_pattern
        minutes: "/5"
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.stue_klima_cooldown

    condition:
      - condition: state
        entity_id: input_boolean.stue_klima_hold
        state: "off"
      - condition: template
        value_template: "{{ states('sensor.stue_target_pumpesettpunkt')|is_number }}"
      - condition: template
        value_template: "{{ states('climate.daikinap86694') not in ['unavailable','unknown'] }}"
      - condition: template
        value_template: "{{ is_state('timer.stue_klima_cooldown','idle') }}"

    action:
      # Ved heartbeat (ikke state-trigger) – gi templates 2s på å sette seg
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.platform != 'state' }}"
            sequence:
              - delay: "00:00:02"

      - variables:
          target_raw: "{{ states('sensor.stue_target_pumpesettpunkt')|float(22.0) }}"
          current_set: >
            {% set t = state_attr('climate.daikinap86694','temperature') %}
            {{ (t if t is number else 22.0)|float }}
          max_step: "{{ states('input_number.stue_setpunkt_endringsgrense')|float(1.0) }}"
          dev_min: "{{ state_attr('climate.daikinap86694','min_temp')|float(16) }}"
          dev_max: "{{ state_attr('climate.daikinap86694','max_temp')|float(30) }}"

          # Klamp target til enhetens grenser FØR vi beregner delta
          target_eff: >
            {% set v = target_raw|float %}
            {% set v1 = dev_max|float if v > dev_max|float else v %}
            {% set v2 = dev_min|float if v1 < dev_min|float else v1 %}
            {{ v2 }}

          # 0.5 °C steg (Daikin API bug på target_temp_step)
          device_step: 0.5

          # "Sann" etterslep
          Tin: "{{ states('sensor.stue_temperatur_virtuell')|float(0) }}"
          desired: "{{ states('input_number.stue_onsket_temp')|float(21.5) }}"
          deficit: "{{ (desired - Tin)|float }}"

          # --- Varmebias / offset ---
          heat_bias_min: "{{ states('input_number.stue_heat_bias_min')|float(3.0) }}" # base a = 3 °C
          heat_bias_gain: "{{ states('input_number.stue_heat_bias_gain')|float(0.5) }}" # ekstra bias pr °C underskudd

          # Hysterese på deficit slik at vi ikke flapper rundt 0
          deficit_eff: >
            {% set d = deficit|float %}
            {% if d >= 0.15 %} {{ d }}
            {% elif d <= 0 %} 0
            {% else %} 0
            {% endif %}

          # Dynamisk deadband (float!)
          min_effective_delta: >
            {% if deficit|float >= 0.5 %} 0.10
            {% else %} {{ (device_step|float)/2 }}    {# 0.25 #}
            {% endif %}

          # Rate-limit skaleres med etterslep
          eff_max_step: >
            {% if deficit|float >= 2.0 %} 2.0
            {% elif deficit|float >= 1.0 %} 1.0
            {% else %} {{ max_step|float }}
            {% endif %}

          # --- FØR: target_eff, current_set, device_step, deficit, eff_max_step er allerede definert ---

          # 1) Hva P/I-regulatoren vil (kan være liten)
          delta_raw: "{{ (target_eff|float) - (current_set|float) }}"

          # 2) Boost basert på faktisk kaldt rom (deficit)
          #    0.5 °C når deficit >= 1.0; 1.0 °C når deficit >= 2.0; 1.5 °C når deficit >= 3.0
          boost_step: >
            {% if deficit|float >= 3.0 %} 1.5
            {% elif deficit|float >= 2.0 %} 1.0
            {% elif deficit|float >= 1.0 %} 0.5
            {% elif deficit|float >= 0.5 %} 0.25
            {% else %} 0.0
            {% endif %}

          # 3) Boost-target = nåværende settpunkt + boost_step (klampet til enhetens grenser)
          boost_target: >
            {% set bt = (current_set|float) + (boost_step|float) %}
            {% set v1 = dev_max|float if bt > dev_max|float else bt %}
            {% set v2 = dev_min|float if v1 < dev_min|float else v1 %}
            {{ v2 }}

          # 4) Kommandomål: ved oppvarming sikter vi mot høyeste av target_eff og boost_target
          # Minimum settpunkt (floor) for å faktisk kunne holde ønsket temp
          set_floor: >
            {% set b = (heat_bias_min|float) + (heat_bias_gain|float) * (deficit_eff|float) %}
            {{ (desired|float) + b }}

          # Tak (ceiling) strammes når underskudd er lite, men aldri under floor
          set_ceiling_raw: >
            {% set des = desired|float %}
            {% set d = deficit_eff|float %}
            {% set extra = 6 if d>=2.0 else 4 if d>=1.0 else 2 if d>=0.5 else 1 %}
            {{ des + (heat_bias_min|float) + extra }}

          set_ceiling: >
            {% set ceil = set_ceiling_raw|float %}
            {% set floor = set_floor|float %}
            {{ [ceil, floor]|max }}

          # Kommandomål: boost opp om kaldt, men klamp mellom floor/ceiling
          target_up: >
            {% if deficit|float > 0 %} {{ [target_eff|float, boost_target|float]|max }}
            {% else %} {{ target_eff|float }}
            {% endif %}

          target_cmd: >
            {% set up = target_up|float %}
            {{ [ set_ceiling|float, [up, set_floor|float]|max ]|min }}

          # 5) Delta mot kommandomål
          delta: "{{ (target_cmd|float) - (current_set|float) }}"

          # 6) Rate-limitert bevegelse mot target_cmd
          move: >
            {% set d = delta|float %}
            {% set s = eff_max_step|float %}
            {% if d > 0 %} {{ min(d, s) }}
            {% elif d < 0 %} {{ max(d, -s) }}
            {% else %} 0
            {% endif %}

          # 7) Nytt rått settpunkt før kvantisering
          next_set_raw: "{{ (current_set|float) + (move|float) }}"

          # Kvantiser til 0.5 °C (nærmeste)
          next_set_q_try: >
            {% set x = next_set_raw|float %}
            {{ ((x*2)|round(0) / 2) | float }}

          # Monotoni: kvantisering må ikke snu retning
          next_set_quant: >
            {% set cs = current_set|float %}
            {% set ds = device_step|float %}
            {% set d  = delta|float %}
            {% set q  = next_set_q_try|float %}
            {# Gå opp: bare korriger hvis kvantisering havnet UNDER gjeldende #}
            {% if d > 0 and q < cs %} {{ (cs + ds) }}
            {# Gå ned: bare korriger hvis kvantisering havnet OVER gjeldende #}
            {% elif d < 0 and q > cs %} {{ (cs - ds) }}
            {% else %} {{ q }}
            {% endif %}

          # --- Robust sluttverdi som faktisk skal sendes til Daikin ---
          # Beskytt mot '' / None på next_set_quant og (sjeldent) dev_min/dev_max
          vmax: "{{ dev_max|float(30) }}"
          vmin: "{{ dev_min|float(16) }}"

          send_set: >
            {# Bruk next_set_quant hvis gyldig, ellers fall-back til current_set #}
            {% set base = next_set_quant|float(current_set|float(22.0)) %}
            {% set hi = vmax|float(30) %}
            {% set lo = vmin|float(16) %}
            {{ [hi, [base, lo]|max]|min | round(1) }}

      - choose:
          # -------- ENDRING --------

          - conditions:
              - condition: template
                value_template: >
                  {% set cs  = current_set|float(0) %}
                  {% set ss  = send_set|float(0) %}
                  {% set tol = (device_step|float(0.5))/4 %}
                  {% set gap_cmd = (target_cmd|float - current_set|float)|abs %}
                  {% set dead    = (min_effective_delta|float) %}
                  {% set cold    = (deficit|float) >= 0.7 %}
                  {% set force_track = ((target_eff|float - current_set|float) >= 0.5 and (deficit|float) >= 0.3) %}
                  {{ (ss - cs)|abs > tol and (gap_cmd >= dead or cold or force_track) }}
            sequence:
              # Sett HEAT hvis nødvendig
              - if:
                  - condition: template
                    value_template: "{{ not is_state('climate.daikinap86694','heat') }}"
                then:
                  - service: climate.set_hvac_mode
                    target: { entity_id: climate.daikinap86694 }
                    data: { hvac_mode: heat }

              # Debug-variabler til logging
              - variables:
                  _cur: "{{ current_set|float(0) }}"
                  _nq: "{{ next_set_quant|float(0) }}"
                  _send: "{{ send_set|float(0) }}"
                  _raw: "{{ target_raw|float(0) }}"
                  _eff: "{{ target_eff|float(0) }}"
                  _cmd: "{{ target_cmd|float(0) }}"
                  _floor: "{{ set_floor|float(0) }}"
                  _cap: "{{ set_ceiling|float(0) }}"
                  _Tin: "{{ Tin|float(0) }}"
                  _des: "{{ desired|float(0) }}"
                  _def: "{{ (desired|float(0) - Tin|float(0)) }}"
                  _deltaraw: "{{ (target_eff|float(0) - current_set|float(0)) }}"
                  _delta: "{{ (target_cmd|float(0) - current_set|float(0)) }}"
                  _move: "{{ move|float(0) }}"
                  _rl: "{{ eff_max_step }}"
                  _tol: "{{ (device_step|float(0.5)) / 4 }}"
                  _dead: "{{ (min_effective_delta|float(0)) }}"
                  _trig: "{{ trigger.platform if trigger is defined else 'manual' }}"

              - service: logbook.log
                data:
                  name: "Stue klima (Daikin)"
                  message: >
                    {{ _trig }} | cur={{ _cur|round(1) }} → send={{ _send|round(1) }} (nq={{ _nq|round(1) }})
                    raw={{ _raw|round(1) }} eff={{ _eff|round(1) }} cmd={{ _cmd|round(1) }}
                    floor={{ _floor|round(1) }} cap={{ _cap|round(1) }}
                    Δraw={{ _deltaraw|round(2) }} Δ={{ _delta|round(2) }} move={{ _move|round(2) }} RL={{ _rl }}
                    Tin={{ _Tin|round(1) }} des={{ _des|round(1) }} def={{ _def|round(2) }}
                    tol={{ _tol|round(3) }} dead={{ _dead|round(2) }}
                entity_id: climate.daikinap86694

              - service: climate.set_temperature
                target: { entity_id: climate.daikinap86694 }
                data: { temperature: "{{ send_set }}" }

              # (valgfritt) Kort kvitterings-vent + retry én gang
              - wait_template: >
                  {{ (state_attr('climate.daikinap86694','temperature')|float(0)) | round(1)
                      == (send_set|float) | round(1) }}
                timeout: "00:00:08"
                continue_on_timeout: true
              - choose:
                  - conditions: >
                      {{ (state_attr('climate.daikinap86694','temperature')|float(0)) < (send_set|float) - 0.1 }}
                    sequence:
                      - service: climate.set_temperature
                        target: { entity_id: climate.daikinap86694 }
                        data: { temperature: "{{ send_set }}" }

              # start cooldown
              - service: timer.start
                target: { entity_id: timer.stue_klima_cooldown }
                data:
                  duration: >
                    {% if deficit|float >= 2.0 %} 00:00:30
                    {% elif deficit|float >= 1.0 %} 00:01:00
                    {% else %} 00:02:00
                    {% endif %}

          # -------- INGEN ENDRING --------
          # -------- INGEN ENDRING --------
          - conditions:
              - condition: template
                value_template: >
                  {% set cs  = current_set|float(0) %}
                  {% set ss  = send_set|float(0) %}
                  {% set tol = (device_step|float(0.5))/4 %}
                  {% set gap_cmd = (target_cmd|float - current_set|float)|abs %}
                  {% set dead    = (min_effective_delta|float) %}
                  {% set cold    = (deficit|float) >= 0.7 %}
                  {{ not ( (ss - cs)|abs > tol and (gap_cmd >= dead or cold) ) and (ss - cs)|abs <= tol }}
            sequence:
              - variables:
                  _cur: "{{ current_set|float(0) }}"
                  _send: "{{ send_set|float(0) }}"
                  _nq: "{{ next_set_quant|float(0) }}"
                  _eff: "{{ target_eff|float(0) }}"
                  _cmd: "{{ target_cmd|float(0) }}"
                  _Tin: "{{ Tin|float(0) }}"
                  _des: "{{ desired|float(0) }}"
                  _def: "{{ (desired|float(0) - Tin|float(0)) }}"
                  _dead: "{{ (min_effective_delta|float(0)) }}"
                  _tol: "{{ (device_step|float(0.5)) / 4 }}"
                  _gap_cmd: "{{ (target_cmd|float(0) - current_set|float(0)) }}"
              - service: logbook.log
                data:
                  name: "Stue klima (Daikin)"
                  message: >
                    Ingen endring: cur={{ _cur|round(1) }} (send={{ _send|round(1) }}, nq={{ _nq|round(1) }})
                    Årsaker: |cmd-gap|={{ _gap_cmd|round(2) }} < dead={{ _dead|round(2) }}
                    og/eller |send-cur|={{ (_send - _cur)|abs|round(3) }} ≤ tol={{ _tol|round(3) }}
                    Kontekst: eff={{ _eff|round(1) }} cmd={{ _cmd|round(1) }} Tin={{ _Tin|round(1) }} des={{ _des|round(1) }} def={{ _def|round(2) }}
                  entity_id: climate.daikinap86694

        default:
          # Fallback: vi landet i ingen av greinene – logg eksplisitt (skal i praksis ikke skje)
          - service: logbook.log
            data:
              name: "Stue klima (Daikin)"
              message: >
                Ingen match i choose() – sjekk gating. cur={{ current_set }} send={{ send_set }}
                eff={{ target_eff }} cmd={{ target_cmd }} dead={{ min_effective_delta }} tol={{ (device_step|float(0.5))/4 }}
              entity_id: climate.daikinap86694

  - id: stue_auto_boost_on_manual_jump
    alias: "Stue – Auto-boost ved manuell økning (med 3D/vifte/guard)"
    mode: single
    trigger:
      - platform: state
        entity_id: input_number.stue_onsket_temp
    condition:
      - condition: template
        value_template: >
          {% set prev = trigger.from_state.state|float(0) %}
          {% set curr = trigger.to_state.state|float(0) %}
          {{ (curr - prev) >= 2.0 }}
      - condition: state
        entity_id: input_boolean.stue_klima_hold
        state: "off"
    action:
      - variables:
          desired: "{{ states('input_number.stue_onsket_temp')|float }}"
          Tin: "{{ states('sensor.stue_temperatur_virtuell')|float }}"
          mins: "{{ states('timer.stue_auto_boost')|default('') and 0 or 30 }}" # uvesentlig; vi setter under
          raw_target: "{{ states('sensor.stue_target_pumpesettpunkt')|float(desired + 2.0) }}"
          clamped: "{{ [ [ raw_target, 15.0 ]|max , 26.0 ]|min }}"
          quant: "{{ ((clamped*2)|round(0)/2) | float }}"
          delta: "{{ desired - Tin }}"
          t_daikin: "{{ state_attr('climate.daikinap86694','current_temperature')|float(0) }}"
          discrepancy: "{{ (t_daikin - Tin)|round(2) }}"
          hvact: "{{ state_attr('climate.daikinap86694','hvac_action')|default('',true) }}"
      # Anti-windup: nullstill I-ledd hvis finnes
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states('input_number.stue_i_ledd') not in ['unknown','unavailable'] }}"
            sequence:
              - service: input_number.set_value
                target: { entity_id: input_number.stue_i_ledd }
                data: { value: 0 }

      # Parkér PID mens vi booter varme
      - service: input_boolean.turn_on
        target: { entity_id: input_boolean.stue_klima_hold }

      # Hard push: HEAT + 3D + vifte
      - service: climate.set_hvac_mode
        data: { entity_id: climate.daikinap86694, hvac_mode: heat }
      - service: climate.set_swing_mode
        data: { entity_id: climate.daikinap86694, swing_mode: "3D" }
      - choose:
          - conditions: "{{ delta > 3.0 }}"
            sequence:
              - service: climate.set_fan_mode
                data: { entity_id: climate.daikinap86694, fan_mode: "4" }
        default:
          - service: climate.set_fan_mode
            data: { entity_id: climate.daikinap86694, fan_mode: "3" }

      # Discrepancy-guard: hvis Daikin tror det er varmt ved innsuget → legg på +2.0 (kvantisert)
      - choose:
          - conditions: "{{ discrepancy >= 3.0 and hvact != 'heating' and delta >= 1.0 }}"
            sequence:
              - variables:
                  bump: "{{ (( (desired + 2.0)*2 )|round(0)/2) | float }}"
              - service: climate.set_temperature
                data:
                  {
                    entity_id: climate.daikinap86694,
                    temperature: "{{ bump }}",
                  }
        default:
          # Ellers: bruk beregnet setpunkt direkte (overstyr rate-limit)
          - service: climate.set_temperature
            data:
              { entity_id: climate.daikinap86694, temperature: "{{ quant }}" }

      # Start/forleng boost-vindu (bruk helper varighet hvis du har; ellers 30 min)
      - service: timer.start
        data:
          entity_id: timer.stue_auto_boost
          duration: "{{ (states('input_number.stue_auto_boost_minutes')|int(30)) * 60 }}"

  - id: stue_auto_boost_early_release
    alias: "Stue – Auto-boost: tidlig release (komfortrapport)"
    mode: single
    trigger:
      - platform: time_pattern
        minutes: "/5"
    condition:
      - condition: state
        entity_id: input_boolean.stue_klima_hold
        state: "on"
      - condition: template
        value_template: >
          {% set dtdt = states('sensor.stue_temp_stigning_fast')|float(0) %}
          {% set desired = states('input_number.stue_onsket_temp')|float %}
          {% set Tin = states('sensor.stue_temperatur_virtuell')|float %}
          {{ dtdt >= 0.010 or (desired - Tin) < 0.7 }}
    action:
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.stue_klima_hold }
      # Komfort: ned med vifte, tilbake til Vertical
      - service: climate.set_fan_mode
        data: { entity_id: climate.daikinap86694, fan_mode: "2" }
      - service: climate.set_swing_mode
        data: { entity_id: climate.daikinap86694, swing_mode: "Vertical" }
      - service: timer.cancel
        data: { entity_id: timer.stue_auto_boost }

  - id: stue_auto_boost_timeout_release
    alias: "Stue – Auto-boost: timeout release"
    mode: single
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.stue_auto_boost
    action:
      - service: input_boolean.turn_off
        target: { entity_id: input_boolean.stue_klima_hold }
      - service: climate.set_fan_mode
        data: { entity_id: climate.daikinap86694, fan_mode: "Auto" }
      - service: climate.set_swing_mode
        data: { entity_id: climate.daikinap86694, swing_mode: "Vertical" }

  - id: stue_auto_boost_on_plateau
    alias: "Stue – Auto-boost ved platå (dT/dt lav, med 3D/vifte/guard)"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.stue_temp_stigning_slow
        below: 0.003 # °C/min
        for: "00:20:00"
    condition:
      - condition: state
        entity_id: input_boolean.stue_klima_hold
        state: "off"
      - condition: template
        value_template: >-
          {% set d_fast  = states('sensor.stue_temp_stigning_fast')|float(0) %}
          {% set d30     = states('sensor.stue_temp_delta_vs_mean30')|float(0) %}
          {% set desired = states('input_number.stue_onsket_temp')|float(0) %}
          {% set Tin     = states('sensor.stue_temperatur_virtuell')|float(0) %}
          {# Release hvis: 1) dT/dt ≥ 0.01 °C/min, 2) nåtemp ≥ 0.3 °C over 30m-mean, eller 3) vi er nær mål #}
          {{ (d_fast >= 0.010) or (d30 >= 0.30) or ((desired - Tin) < 0.7) }}

    action:
      - variables:
          desired: "{{ states('input_number.stue_onsket_temp')|float }}"
          Tin: "{{ states('sensor.stue_temperatur_virtuell')|float }}"
          raw_target: "{{ states('sensor.stue_target_pumpesettpunkt')|float(desired + 1.5) }}"
          clamped: "{{ [ [ raw_target, 15.0 ]|max , 26.0 ]|min }}"
          quant: "{{ ((clamped*2)|round(0)/2) | float }}"
          delta: "{{ desired - Tin }}"
          t_daikin: "{{ state_attr('climate.daikinap86694','current_temperature')|float(0) }}"
          discrepancy: "{{ (t_daikin - Tin)|round(2) }}"
          hvact: "{{ state_attr('climate.daikinap86694','hvac_action')|default('',true) }}"
      - service: input_boolean.turn_on
        target: { entity_id: input_boolean.stue_klima_hold }
      - service: climate.set_hvac_mode
        data: { entity_id: climate.daikinap86694, hvac_mode: heat }
      - service: climate.set_swing_mode
        data: { entity_id: climate.daikinap86694, swing_mode: "3D" }
      - choose:
          - conditions: "{{ delta > 2.0 }}"
            sequence:
              - service: climate.set_fan_mode
                data: { entity_id: climate.daikinap86694, fan_mode: "4" }
        default:
          - service: climate.set_fan_mode
            data: { entity_id: climate.daikinap86694, fan_mode: "3" }
      - choose:
          - conditions: "{{ discrepancy >= 3.0 and hvact != 'heating' and delta >= 1.0 }}"
            sequence:
              - variables:
                  bump: "{{ (( (desired + 2.0)*2 )|round(0)/2) | float }}"
              - service: climate.set_temperature
                data:
                  {
                    entity_id: climate.daikinap86694,
                    temperature: "{{ bump }}",
                  }
              - service: logbook.log
                data:
                  name: "Autoboost ved ingen eller svak temperaturøkning"
                  message: >
                    Temperaturen er big-bumpet til {{bump}}
                  entity_id: "input_number.stue_i_term"

        default:
          - service: climate.set_temperature
            data:
              { entity_id: climate.daikinap86694, temperature: "{{ quant }}" }
          - service: logbook.log
            data:
              name: "Autoboost ved ingen eller svak temperaturøkning"
              message: >
                Temperaturen er small-bumpet til {{quant}}
              entity_id: "input_number.stue_i_term"
      - service: timer.start
        data:
          entity_id: timer.stue_auto_boost
          duration: "{{ (states('input_number.stue_auto_boost_minutes')|int(30)) * 60 }}"
